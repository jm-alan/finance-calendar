declare type ListenDestructor = () => void;

declare type ListenComposer = (listener: () => void) => ListenDestructor;

declare type EventListenerComposeObject = {
  afterscriptexecute: ListenComposer;
  auxclick: ListenComposer;
  beforescriptexecute: ListenComposer;
  blur: ListenComposer;
  click: ListenComposer;
  compositionend: ListenComposer;
  compositionstart: ListenComposer;
  compositionupdate: ListenComposer;
  contextmenu: ListenComposer;
  copy: ListenComposer;
  cut: ListenComposer;
  dblclick: ListenComposer;
  DOMActivate: ListenComposer;
  DOMMouseScroll: ListenComposer;
  error: ListenComposer;
  focusin: ListenComposer;
  focusout: ListenComposer;
  focus: ListenComposer;
  fullscreenchange: ListenComposer;
  fullscreenerror: ListenComposer;
  gesturechange: ListenComposer;
  gestureend: ListenComposer;
  gesturestart: ListenComposer;
  keydown: ListenComposer;
  keypress: ListenComposer;
  keyup: ListenComposer;
  mousedown: ListenComposer;
  mouseenter: ListenComposer;
  mouseleave: ListenComposer;
  mousemove: ListenComposer;
  mouseout: ListenComposer;
  mouseover: ListenComposer;
  mouseup: ListenComposer;
  mousewheel: ListenComposer;
  msContentZoom: ListenComposer;
  MSGestureChange: ListenComposer;
  MSGestureEnd: ListenComposer;
  MSGestureHold: ListenComposer;
  MSGestureStart: ListenComposer;
  MSGestureTap: ListenComposer;
  MSInertiaStart: ListenComposer;
  MSManipulationStateChanged: ListenComposer;
  paste: ListenComposer;
  scroll: ListenComposer;
  select: ListenComposer;
  show: ListenComposer;
  touchcancel: ListenComposer;
  touchend: ListenComposer;
  touchmove: ListenComposer;
  touchstart: ListenComposer;
  webkitmouseforcechanged: ListenComposer;
  webkitmouseforcedown: ListenComposer;
  webkitmouseforceup: ListenComposer;
  webkitmouseforcewillbegin: ListenComposer;
  wheel: ListenComposer;
};
